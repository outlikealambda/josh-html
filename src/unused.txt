{-
    UpdateME ->
      ({model | status = "updating"}
      , Cmd.map context.next <| Task.perform UpdateFailed UpdateComplete ( updateMe (Debug.log "updating" model) user ))
    UpdateFailed err ->
      { model | updateError = Just ( Debug.log "failed to update" err) } ![]
    UpdateComplete updatedLocation ->
      ({model | status = "updated"}, toCmd <| context.goHome updatedLocation)
-}

updateMe : Model -> Location -> Platform.Task Http.Error Location.Location
updateMe model location =
  (encoder model)
    |> Encode.encode 0
    |> Http.string
    |> post'
      Location.decoder ("/api/" ++ toString location.id ++ "/updateLocation" )



GetME ->
  ({model | status = "getting"}
  , Cmd.map context.next <| Task.perform GetFailed GetComplete ( getME (Debug.log "getting" user)))
GetFailed err ->
  { model | getError = Just ( Debug.log "failed to get" err)} ![]
GetComplete locations ->
  {model | locations = locations } ![]

  getCmd : Account.User -> Cmd Msg
  getCmd user =
     Task.perform GetFailed GetComplete (getME user)

  getME : Account.User -> Platform.Task Http.Error (List Location.Location)
  getME user =
    Http.get
    (Decode.list Location.decoder) ("/api/" ++ toString user.id ++ "/getLocation")



    UpdateLocation ->
      ({model | status = "updating"}
      , Cmd.map context.next <| Task.perform UpdateFailed UpdateComplete ( updateMe (Debug.log "updating" model)))
    UpdateFailed err ->
      { model | updateError = Just ( Debug.log "failed to update" err) } ![]
    UpdateComplete updatedLocation ->
      ({model | status = "updated"}, toCmd <| context.goHome updatedLocation)
    RemoveLocation ->
      ({model | status = "removing"}
      , Cmd.map context.next <| Task.perform RemoveFailed RemoveComplete ( removeME (Debug.log "removing" model.location)))
